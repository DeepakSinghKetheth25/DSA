Time Complexity -> O(n)
Space Complexity -> (n)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        int profit[n];
        for(int i=0;i<n;i++){
            profit[i]=0;
        }
        
        //Maximum Profit is only 1 transaction is allowed from [i....n-1]
        int maxnum = prices[n-1];
        for(int i=n-2;i>=0;i--){
            
            if(prices[i] > maxnum)
                maxnum = prices[i];
            
            profit[i] = max(profit[i+1],maxnum - prices[i]);
        }
        
        //Maximum Profit if 2 transactions are allowed i.e max transaction from  [0 to i] & max transaction from [i+1 to n-1]
        int minnum = prices[0];
        for(int i=1;i<n;i++)
        {
            if(prices[i]<minnum)
                minnum = prices[i];
            
            profit[i] = max(profit[i-1], profit[i] + prices[i]-minnum );
        }        
        
        return profit[n-1];
        
    }
};
