Solution 1:
//Time Complexity : O(n)
//Space Complexity : O(n) 
//Approach : Using Stack, Place all elements of LL in stack. 
             Pop one element at a time from stack & check with check each element of LL.
             If all the elements are equal, it means, LL is Palindrome.

Solution 2:

//Time Complexity -> O(n)
//Space Complexity O(1)
//Approach : Reversing 2nd half of LL, & then each element of both half of LL for equality.


class Solution{
  public:
    //Function to check whether the list is palindrome.
    Node* reverse(Node *ptr ){
        
        Node *prev=NULL,*curr=ptr,*next=NULL;
        
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    
    bool isPalindrome(Node *head)
    {
        if(head->next == NULL)
            return true;
        
        Node *slow=head, *fast=head,*mid=NULL,*ptr1=NULL,*ptr2=NULL;
        while(fast->next!=NULL && fast->next->next!=NULL)
            {
                slow=slow->next;
                fast=fast->next->next;
            }
            if(fast->next==NULL)
                {
                    ptr1=head;
                    ptr2=slow->next;
                    mid=slow;
                }
            else
                {
                    ptr1=head,
                    ptr2=slow->next;
                    mid=slow->next; 
                }
        
        ptr2=reverse(ptr2);
        
        while(ptr1!=mid){
            if(ptr1->data!=ptr2->data)
                break;
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }
        
        if(ptr1!=mid)
            return false;
        return true;
        
    }
};
