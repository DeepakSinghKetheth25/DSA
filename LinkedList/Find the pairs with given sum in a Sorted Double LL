Solution 1:
//Time Complexity -> O(n*n)
//Space Complexity -> O(1)
//Approach : Brute Force, traversing the whole DLL for each element.


Solution 2: 
//Time Complexity -> O(n)
//Space Complexity -> O(1)
//Approach :  i) Using two pointers, first at beginning of DLL & other at end of DLL.
              ii) If, (first->data + end->data) == sum then print elements, & increment first pointer & decrement second pointer. 
              iii) If (first->data + end->data) > sum then decrease the end pointer.
              iv) If (first->data + end->data) < sum then increase the first pointer.
              

void pairSum(struct Node *head, int x)
{
    // Set two pointers, first to the beginning of DLL
    // and second to the end of DLL.
    struct Node *first = head;
    struct Node *second = head;
    while (second->next != NULL)
        second = second->next;
 
    // To track if we find a pair or not
    bool found = false;
 
    // The loop terminates when either of two pointers
    // become NULL, or they cross each other (second->next
    // == first), or they become same (first == second)
    while (first != NULL && second != NULL &&
        first != second && second->next != first)
    {
        // pair found
        if ((first->data + second->data) == x)
        {
            found = true;
            cout << "(" << first->data<< ", "
                << second->data << ")" << endl;
 
            // move first in forward direction
            first = first->next;
 
            // move second in backward direction
            second = second->prev;
        }
        else
        {
            if ((first->data + second->data) < x)
                first = first->next;
            else
                second = second->prev;
        }
    }
 
    // if pair is not present
    if (found == false)
        cout << "No pair found";
}
