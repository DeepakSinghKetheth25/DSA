class Solution{
  public:
   
    long long int merge(long long arr[],long long aux[], long long start,long long mid, long long end){
        
        long long i,j,count=0,k;
        i=start;j=mid+1,k=start;
        
        while(i<=mid && j<=end){
            
            if(arr[i]<=arr[j])
                aux[k++]=arr[i++];
            
            else
                {
                    aux[k++]=arr[j++];
                    count=count + (mid-i+1);
                }
        }
        
        while(i<=mid)
            aux[k++]=arr[i++];
            
        while(j<=end)
            aux[k++]=arr[j++];
        
        for (i = start; i <= end; i++) {
            arr[i] = aux[i];
        }
        
        return count;
    }
    
    
    long long int mergeSort(long long arr[],long long aux[],long long start, long long end){
        long long inversionCount= 0 ;
        if(start<end)
        {
            long long mid = start + (end-start)/2;
            
            inversionCount+=mergeSort(arr,aux,start,mid);
            inversionCount+=mergeSort(arr,aux,mid+1,end);
            inversionCount+=merge(arr,aux,start,mid,end);
        
        }                
        return inversionCount;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        long long aux[N];
        return mergeSort(arr,aux,0,N-1);   
    }

};
