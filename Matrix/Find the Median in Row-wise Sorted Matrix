//Time Complexity -> O( 32*r*log(c) )
//Space Complexity -> O(1)
//Aproach -> Binary Search.

class Solution{   
public:
    int median(vector<vector<int>> &matrix, int r, int c){
        // code here   
        
        
        int min= INT_MAX , max = INT_MIN;
        for(int i=0;i<r;i++)
        {
            if(min>matrix[i][0])
                min = matrix[i][0];
                
            if(max<matrix[i][c-1])
                max = matrix[i][c-1];
        }
        
        int req = (r*c + 1)/2; 
        
        while(min<max)
        {
            int mid = min+(max-min)/2;
            
            int lessthan = 0;
            for(int i=0;i<r;i++)
                lessthan += (upper_bound(matrix[i].begin(),matrix[i].end(),mid)-matrix[i].begin());
            if(lessthan<req)
                min = mid+1;
            else
                max = mid;
        }
        return min;
    }
