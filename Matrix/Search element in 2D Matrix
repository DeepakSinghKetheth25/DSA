//Time Complexity -> O( log(n) + n ) => O(logn) for finding the correct row where num exists. 
                                        O(n) for traversing the elements of the row where element exists possibly.  
//Space Complexity -> O(1)

//Approach -> 1. Implementing Binary Search
              2. First of all finding the correct row
                  a) while(start_row <= end_row) 
                       i) if num is less than first element of mid row, then check in left half of the rows.
                      ii) if num is greater than last element of mid row, then check in right half of the rows.
                     iii) If control reaches here, it means that element should be present in mid row.
                            Iterate for all elements of mid row, 
                              return true, if element is found & false otherwise.

class Solution {
public:
    
    bool search(vector<vector<int>>& arr, int num, int start_row, int end_row){
        
       while(start_row<=end_row){
           
           int mid = start_row + (end_row - start_row)/2;
           
           if(num < arr[mid][0])
               return search(arr,num,start_row,mid-1);
           
           if(num>arr[mid][arr[mid].size()-1])
               return search(arr,num,mid+1,end_row);
           
            for(int i=0;i<arr[mid].size();i++){
                if(num == arr[mid][i])
                    return true;
            }
           return false;
       } 
        return false;
    }
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        return search(matrix,target,0,matrix.size()-1);
    }
};
