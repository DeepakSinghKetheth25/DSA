Solution :1
//Time Complexity -> O(n*log(m)) , because for every row we are calculating lower and upper bounds.
//Space Complexity -> O(1)
//Approach : Using Upper & Lower Bounds.

class Solution{
public:
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    // code here
	    
	    int count = INT_MIN;
	    int index = -1;
	    
	    for(int i=0;i<n;i++){
	        
	        if(arr[i][m-1]==0)
	            continue;
	        int curr_count = upper_bound(arr[i].begin(),arr[i].end(),1)-lower_bound(arr[i].begin(),arr[i].end(),1);
	        if(count<curr_count)
	            {
	                count = curr_count;
	                index= i;
	            }
	    }
	    return index;
	}

};


Solution : 2

Time Complexity : O(n+m) , because for every row we can possibly go as left as far as we have come in the right direction.(i.e at max m)
Space Complexity : O(1)
Appraoach : 1) Find the first index of 1 in first row (let say first)(Using binary or linear search) & set rowindex=0;
            2) For every row after 1st row, 
                i) check if arr[first-1]==0 , then do nothing, continue;
                ii)check if arr[first-1]==1 , then iterate towards left & find the first index of 1 in present row. & update firstindex & rowindex=i;
            3) At the end return rowindex;
            
            
            
 //Calculating firstindex of 1 using binary search.
 int first(bool arr[], int low, int high) 
{ 
    if(high >= low) 
    { 
        // Get the middle index 
        int mid = low + (high - low)/2; 
    
        // Check if the element at middle index is first 1 
        if ( ( mid == 0 || arr[mid-1] == 0) && arr[mid] == 1) 
            return mid; 
    
        // If the element is 0, recur for right side 
        else if (arr[mid] == 0) 
            return first(arr, (mid + 1), high); 
        
        // If element is not first 1, recur for left side 
        else
            return first(arr, low, (mid -1)); 
    } 
    return -1; 
} 
 
 int rowWithMax1s(bool mat[R][C])
{
    // Initialize first row as row with max 1s
    int max_row_index = 0;

    // The function first() returns index of first 1 in row 0.
    // Use this index to initialize the index of leftmost 1 seen so far
    int j = first(mat[0], 0, C-1);
    if (j == -1) // if 1 is not present in first row
      j = C - 1;

    for (int i = 1; i < R; i++)
    {
        // Move left until a 0 is found
        while (j >= 0 && mat[i][j] == 1)
        {
           j = j-1;  // Update the index of leftmost 1 seen so far
           max_row_index = i;  // Update max_row_index
        }
    }
    return max_row_index;
}

 
